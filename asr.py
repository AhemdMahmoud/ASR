# -*- coding: utf-8 -*-
"""ASR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EyFY8v9balfJtWNpYdDUUIPbZedAMCUL
"""

!pip install datasets
!pip install transformers

!pip install evaluate

from datasets import load_dataset,DatasetDict,Audio
from huggingface_hub import notebook_login

from transformers.models.whisper.tokenization_whisper import TO_LANGUAGE_CODE
from transformers import WhisperProcessor
import torch
from dataclasses import dataclass
from typing import Any, Dict, List,Union
import evaluate

notebook_login()

common_voice = load_dataset("mozilla-foundation/common_voice_13_0", "dv")

common_voice

common_voice = DatasetDict()

common_voice["train"] = load_dataset("mozilla-foundation/common_voice_11_0", "dv", split="train+validation")
common_voice["test"] = load_dataset("mozilla-foundation/common_voice_11_0", "dv", split="test")

common_voice

common_voice = common_voice.select_columns(["audio", "sentence"])

common_voice

processor = WhisperProcessor.from_pretrained("openai/whisper-medium",language="sinhalese",task="transcribe")

common_voice["train"].features

"""# resampleing"""

feature_extractor = processor.feature_extractor.sampling_rate

feature_extractor

common_voice = common_voice.cast_column("audio",Audio(sampling_rate=feature_extractor))

common_voice["train"].features

"""# it's Done"""

def prepare_dataset(example):
  audio = example["audio"]
  example = processor(
      audio=audio["array"], # use the feature extractor to compute the log-mel spectrogram input features from our 1-dimensional audio array.
      sampling_rate=audio["sampling_rate"],
      text=example["sentence"] # encode the transcriptions to label ids through the use of the tokenizer.
  )
  example["input_length"] = len(audio["array"])/ audio["sampling_rate"]   # with seconds
  return example

common_voice = common_voice.map(prepare_dataset,remove_columns=common_voice.column_names["train"],num_proc=1)

common_voice

"""# Finally, we filter any training data with audio samples longer than 30s"""

# common_voice["train"][0]["input_features"]

"""## num rows in trian split is : 4863"""

# max_input_length = 30.0
# common_voice["train"]= common_voice["train"].filter(lambda x: x["input_length"] <= max_input_length)
# common_voice

"""### after that we get : 4863

"""

max_input_length = 30.0
def is_audio_in_length_range(length):
    return length < max_input_length
common_voice["train"]= common_voice["train"].filter(is_audio_in_length_range,input_columns=["input_length"])
common_voice

"""# Training and Evaluation"""

@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any

    def __call__(
        self, features: List[Dict[str, Union[List[int], torch.Tensor]]]
    ) -> Dict[str, torch.Tensor]:
        # split inputs and labels since they have to be of different lengths and need different padding methods
        # first treat the audio inputs by simply returning torch tensors
        input_features = [
            {"input_features": feature["input_features"][0]} for feature in features
        ]
        batch = self.processor.feature_extractor.pad(input_features, return_tensors="pt")

        # get the tokenized label sequences
        label_features = [{"input_ids": feature["labels"]} for feature in features]
        # pad the labels to max length
        labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")

        # replace padding with -100 to ignore loss correctly
        labels = labels_batch["input_ids"].masked_fill(
            labels_batch.attention_mask.ne(1), -100
        )

        # if bos token is appended in previous tokenization step,
        # cut bos token here as it's append later anyways
        if (labels[:, 0] == self.processor.tokenizer.bos_token_id).all().cpu().item():
            labels = labels[:, 1:]

        batch["labels"] = labels

        return batch

data_colator = DataCollatorSpeechSeq2SeqWithPadding(processor=processor)

! pip install jiwer

metric = evaluate.load("wer")

"""# compute Metrics"""

from transformers.models.whisper.english_normalizer import BasicTextNormalizer

normalizer = BasicTextNormalizer()

def compute_metric(pred):
  pred_ids = pred.predictions
  label_ids = pred.label_ids


  label_ids[label_ids==-100] = processor.tokenizer.pad_token_id

  pred_str = processor.batch_decode(pred_ids,skip_special_tokens=True)
  label_str = processor.batch_decode(label_ids,skip_special_tokens=True)

  wer_ortho = 100 * metric.compute(predictions=pred_str,references=label_str)


  pred_str_norm = [normalizer(pred) for pred in pred_str]
  label_str_norm = [normalizer(label) for label in label_str]

  pred_str_norm = [pred_str_norm[i] for i in range(len(pred_str_norm)) if len(pred_str_norm[i]) > 0]
  label_str_norm = [label_str_norm[i] for i in range(len(label_str_norm)) if len(label_str_norm[i]) > 0]

  wer_norm = 100 * metric.compute(predictions=pred_str_norm,references=label_str_norm)

  return {"wer_ortho" : wer_ortho,"wer_norm" : wer_norm}

"""# Load a Pre-Trained Checkpoint"""

from transformers import WhisperForConditionalGeneration

model= WhisperForConditionalGeneration.from_pretrained("openai/whisper-medium")

model.config

model.config.use_cache = False

from functools import partial

model.generate = partial(model.generate,task="transcribe",language="sinhalese",use_cache=True)

"""# Define the Training Configuration"""

from transformers import Seq2SeqTrainingArguments

from transformers import Seq2SeqTrainingArguments

training_args = Seq2SeqTrainingArguments(
    output_dir="./whisper-small-dv",  # name on the HF Hub
    per_device_train_batch_size=2,
    gradient_accumulation_steps=8,  # increase by 2x for every 2x decrease in batch size
    learning_rate=1e-5,
    lr_scheduler_type="constant_with_warmup",
    warmup_steps=50,
    max_steps=500,  # increase to 4000 if you have your own GPU or a Colab paid plan
    gradient_checkpointing=True,
    fp16=True,
    fp16_full_eval=True,
    per_device_eval_batch_size=8,
    predict_with_generate=True,
    generation_max_length=225,
    save_steps=500,
    eval_steps=500,
    logging_steps=25,
    report_to=["tensorboard"],
    metric_for_best_model="wer",
    greater_is_better=False,
    push_to_hub=True,
)

from transformers import Seq2SeqTrainer

trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,
    train_dataset=common_voice["train"],
    eval_dataset=common_voice["test"],
    data_collator=data_colator,
    compute_metrics=compute_metric,
)

trainer.train()

kwargs = {
    "dataset_tags": "mozilla-foundation/common_voice_13_0",
    "dataset": "Common Voice 13",  # a 'pretty' name for the training dataset
    "language": "dv",
    "model_name": "Whisper medium Dv - Sanchit Gandhi",  # a 'pretty' name for your model
    "finetuned_from": "openai/whisper-medium",
    "tasks": "automatic-speech-recognition",
}

trainer.push_to_hub(**kwargs)